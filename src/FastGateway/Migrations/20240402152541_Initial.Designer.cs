// <auto-generated />
using System;
using FastGateway.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastGateway.Migrations
{
    [DbContext(typeof(MasterDbContext))]
    [Migration("20240402152541_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("FastGateway.Domain.Cert", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Certs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Domains")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Expired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NotAfter")
                        .HasColumnType("TEXT");

                    b.Property<int>("RenewStats")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RenewTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("cert", (string)null);
                });

            modelBuilder.Entity("FastGateway.Domain.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddHeader")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LoadType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProxyPass")
                        .HasColumnType("TEXT");

                    b.Property<string>("Root")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TryFiles")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpStreams")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("FastGateway.Domain.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableFlowMonitoring")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableHttp3")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableRequestSource")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableTunnel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHttps")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Listen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceNames")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SslCertificate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SslCertificatePassword")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("service", (string)null);
                });

            modelBuilder.Entity("FastGateway.Domain.StatisticIp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ip")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("statistic_ip", (string)null);
                });

            modelBuilder.Entity("FastGateway.Domain.StatisticRequestCount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Error4xxCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Error5xxCount")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequestCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("statistic_request_count", (string)null);
                });

            modelBuilder.Entity("FastGateway.Domain.Location", b =>
                {
                    b.HasOne("FastGateway.Domain.Service", null)
                        .WithMany("Locations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FastGateway.Domain.StatisticRequestCount", b =>
                {
                    b.HasOne("FastGateway.Domain.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FastGateway.Domain.Service", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
